from cmu_112_graphics import *
import basic_graphics, time, random
import objects

# frames draws various pages and windows, like the welcome page and the item bar

# draw welcome page
class Welcome(object):
    def __init__(self, canvas):
        self.canvas = canvas
    
    def draw(self, canvas):
        
        boxX = 120
        boxY = 50

        # background
        canvas.create_image(self.width/2, self.height/2, 
                            image=ImageTk.PhotoImage(self.app.drawStart))

        # name
        canvas.create_text(self.width//2, self.height//4, 
                           text='MESO',
                           font='Verdana 40 bold', 
                           fill='blue')

        # first button
        canvas.create_rectangle(self.width//2 - boxX, 
                                self.height//2 - 2*boxY,
                                self.width//2 + boxX,
                                self.height//2 - boxY,
                                fill=self.buttonColor1,
                                width=self.width1)
        
        canvas.create_text(self.width//2, self.height//2 - 1.5*boxY,
                           text='click to continue',
                           font='Verdana 16 bold', 
                           fill='black')
    
        # second button
        canvas.create_rectangle(self.width//2 - boxX, 
                                self.height//2 + boxY,
                                self.width//2 + boxX,
                                self.height//2 + 2*boxY,
                                fill=self.buttonColor2, 
                                width=self.width2)
            
        canvas.create_text(self.width//2, self.height//2 + 1.5*boxY,
                           text='click to view instructions',
                           font='Verdana 16 bold', 
                           fill='black')
    
# draw instructions page
class Instructs(object):

    def __init__(self, canvas):
        self.canvas = canvas
    
    def draw(self, canvas):
        margin = 20
        font = 'Verdana 14'

        boxX = 120
        boxY = 50
        boxHeight = self.height - 6*margin

        backX = 50
        backY = 20
        backHeight = self.height - 3*margin

        # background
        canvas.create_rectangle(0, 0, self.width, self.height, 
                                fill='bisque')

        # title
        canvas.create_text(self.width//2, self.app.margin+50, 
                           text='instructions', 
                           font='Verdana 22 bold', 
                           fill='blue')
        
        # instructions
        canvas.create_text(self.width//2, 120,
                           text='welcome to MESO!', font='Verdana 16 bold')
        
        # create your map
        canvas.create_text(self.width//4, 180,
                           text='create your map', font='Verdana 14 bold',
                           anchor=SW)

        canvas.create_text(self.width//4, 210,
                           text='to start off, you can choose whether you would like to set up your own map or', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 230,
                           text='use a map generated by the program. if you choose to create your own map, click', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 250,
                           text='click on the green space to place a lake, mountains, tipis, and trees. if the', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 270,
                           text='location isn\'t valid, the object simply will not appear.', 
                           font=font, anchor=SW)

        # town residents
        canvas.create_text(self.width//4, 300,
                           text='town residents', font='Verdana 14 bold',
                           anchor=SW)
        canvas.create_text(self.width//4, 330,
                           text='once you\'ve created your town, you will have civilians living in the tipis!', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 350,
                           text='watch as they interact with each other and their surroundings. new townspeople', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 370,
                           text='will immigrate to the town every 100 years and collisions between residents ', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 390,
                           text='will create a new one at a random home', 
                           font=font, anchor=SW)
        
        # grow your town
        canvas.create_text(self.width//4, 420,
                           text='grow your town', font='Verdana 14 bold',
                           anchor=SW)
        canvas.create_text(self.width//4, 450,
                            text='click on the upgrades in the item bar on the right to select and place these', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 470,
                           text='objects on the map. some can upgrade existing structures as well-- like a tipi', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 490,
                           text='to a house. these upgrades will be made available when certain conditions are', 
                           font=font, anchor=SW)
        canvas.create_text(self.width//4, 510,
                           text='met, and will help you keep up up with your growing population!',
                           font=font, anchor=SW)

        # face disasters
        canvas.create_text(self.width//4, 540,
                           text='face disasters', font='Verdana 14 bold',
                           anchor=SW)

        canvas.create_text(self.width//4, 570,
                           text='life won\'t be completely idyllic. your town will undergo hardships in the form',
                           font=font, anchor=SW)
        
        canvas.create_text(self.width//4, 590,
                           text='of disasters... be alert!',
                           font=font, anchor=SW)

        # continue to game
        canvas.create_rectangle(self.width//2 - boxX, boxHeight - boxY,
                                self.width//2 + boxX, boxHeight,
                                fill=self.buttonColor5, width=self.width5)
        canvas.create_text(self.width//2, boxHeight - 0.5*boxY,
                           text='continue to game',
                           font='Verdana 18 bold', fill='black')

        # back button
        canvas.create_rectangle(self.width//2 - backX,
                                backHeight - backY,
                                self.width//2 + backX,
                                backHeight + backY,
                                fill=self.buttonColor3,
                                width=self.width3)

        canvas.create_text(self.width//2, backHeight,
                           text='back', font='Verdana 14 bold', 
                           fill='black')

# draw choosemode page
class Choose(object):
    def __init__(self, canvas):
        self.canvas = canvas
   
    def draw(self, canvas):
        boxX = 120
        boxY = 50
        backX = 50
        backY = 20
        backHeight = self.height - 3*self.margin

        # background
        canvas.create_image(self.width/2, self.height/2, 
                            image=ImageTk.PhotoImage(self.app.drawStart))

        # name
        canvas.create_text(self.width//2, self.height//4, 
                           text='MESO',
                           font='Verdana 40 bold', 
                           fill='blue')

        # first button         
        canvas.create_rectangle(self.width//2 - boxX, 
                                self.height//2 - 2*boxY,
                                self.width//2 + boxX,
                                self.height//2 - boxY,
                                fill=self.buttonColor1, 
                                width=self.width1)
        
        canvas.create_text(self.width//2, self.height//2 - 1.5*boxY,
                           text='create your own map',
                           font='Verdana 16 bold', fill='black')

        # second button
        canvas.create_rectangle(self.width//2 - boxX, 
                                self.height//2 + boxY,
                                self.width//2 + boxX,
                                self.height//2 + 2*boxY,
                                fill=self.buttonColor2, 
                                width=self.width2)
            
        canvas.create_text(self.width//2, self.height//2 + 1.5*boxY,
                           text='auto-generate a map',
                           font='Verdana 16 bold', fill='black')
        
        # back button
        canvas.create_rectangle(self.width//2 - backX,
                                backHeight - backY,
                                self.width//2 + backX,
                                backHeight + backY,
                                fill=self.buttonColor3,
                                width=self.width3)

        canvas.create_text(self.width//2, backHeight,
                           text='back', font='Verdana 14 bold', fill='black')
                            
# draw basic game window
class Frame(object):
    def __init__(self, canvas):
        self.canvas = canvas
        
    def draw(self, canvas):
        # game window

        canvas.create_rectangle(self.margin + 1, 
                                self.margin - 2, 
                                self.frameRightbound-self.margin/2, # 1125 - 10 
                                self.height - self.margin + 2, # 800 - 20 
                                fill='grey15', width=2)

        cx = (self.frameRightbound + 0.5*self.margin) / 2
        cy = self.height // 2
        canvas.create_image(cx, cy, image=ImageTk.PhotoImage(self.grassIMG))
        
        # info window
        canvas.create_rectangle(self.frameRightbound+self.margin/2, 
                                self.margin,
                                self.width-self.margin, 
                                self.height-self.margin,
                                fill='mistyrose', width=3, outline='grey15')

# draw info window (item bar on the right side)
class Info(object):

    def __init__(self, canvas):
        self.canvas = canvas

    def draw(self, canvas, year, population):
        # game info
        canvas.create_text(self.infoMidX, 40, 
                           text=f'Year: {year}')
        canvas.create_text(self.infoMidX, 60,
                           text=f'Population: {(len(self.humans))*4}')
        canvas.create_text(self.infoMidX, 100,
                           text='Upgrades', font='Verdana 20 bold')

        # new tipi
        canvas.create_rectangle(self.infoMidX - self.buttonR,
                                200 - self.buttonR,
                                self.infoMidX + self.buttonR,
                                200 + self.buttonR,
                                fill='white', width=2, outline=self.tipiOutline)
        
        canvas.create_image(self.infoMidX, 200, image=ImageTk.PhotoImage(self.tipiIMG))

        if self.tipiUnlocked == False:
            canvas.create_rectangle(self.infoMidX - self.buttonR,
                                    200 - self.buttonR,
                                    self.infoMidX + self.buttonR,
                                    200 + self.buttonR,
                                    fill='gray', width=0)
            canvas.create_text(self.infoMidX, 200, 
                               text='locked', font='Verdana 12')

        # new house
        canvas.create_rectangle(self.infoMidX - self.buttonR,
                                350 - self.buttonR,
                                self.infoMidX + self.buttonR,
                                350 + self.buttonR,
                                fill='white', width=2, outline=self.houseOutline)
        canvas.create_image(self.infoMidX, 350, image=ImageTk.PhotoImage(self.houseIMG))

        if self.houseUnlocked == False:
            canvas.create_rectangle(self.infoMidX - self.buttonR,
                                    350 - self.buttonR,
                                    self.infoMidX + self.buttonR,
                                    350 + self.buttonR,
                                    fill='gray', width=0)
            canvas.create_text(self.infoMidX, 350,
                               text='locked', font='Verdana 12')

        # new skyscraper
        canvas.create_rectangle(self.infoMidX - self.buttonR,
                                500 - self.buttonR,
                                self.infoMidX + self.buttonR,
                                500 + self.buttonR,
                                fill='white', width=2, outline=self.skyscraperOutline)
        
        canvas.create_image(self.infoMidX, 500, image=ImageTk.PhotoImage(self.skyscraperIMG))

        if self.skyscraperUnlocked == False:
            canvas.create_rectangle(self.infoMidX - self.buttonR,
                                    500 - self.buttonR,
                                    self.infoMidX + self.buttonR,
                                    500 + self.buttonR,
                                    fill='gray', width=0)
            canvas.create_text(self.infoMidX, 500,
                               text='locked', font='Verdana 12')

        # new tree
        canvas.create_rectangle(self.infoMidX - self.buttonR,
                                650 - self.buttonR,
                                self.infoMidX + self.buttonR,
                                650 + self.buttonR,
                                fill='white', width=2, outline=self.treeOutline)
        
        canvas.create_image(self.infoMidX, 650, image=ImageTk.PhotoImage(self.treeIMG))

        if self.treeUnlocked == False:
            canvas.create_rectangle(self.infoMidX - self.buttonR,
                                    650 - self.buttonR,
                                    self.infoMidX + self.buttonR,
                                    650 + self.buttonR,
                                    fill='gray', width=0)
            canvas.create_text(self.infoMidX, 650,
                               text='locked', font='Verdana 12')

        # instructions button
        canvas.create_rectangle(self.infoMidX - 60, self.height - 80,
                                self.infoMidX + 60, self.height - 60,
                                fill=self.buttonColor4, width=self.width4)
        
        canvas.create_text(self.infoMidX, self.height - 70,
                           text='view instructions', font='Verdana 12')
        
        canvas.create_text(self.infoMidX, self.height - 40,
                           text='Press \'p\' to pause')


